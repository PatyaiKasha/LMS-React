export default [
    {
    dest: 'ТЕОРИЯ',
    number: '1',
    title: 'Document Object Model',
    timer: '15',
    content: [
        {
        contentTitle: "DOM (Document Object Model)",
        contentText: "DOM (Document Object Model) - это межплатформенный и независимый от языка интерфейс прикладного программирования, и может использоваться с любым языком программирования. DOM обрабатывает HTML, XHTML или XML-документ как древовидную структуру, в которой каждый узел является объектом, который имеет свойства и методы, представляющим часть документа. Объекты могут управляться программно, и любые видимые изменения, происходящие в результате, могут затем отражаться в отображении документа. По существу DOM соединяет веб-страницу с языками программирования. Сам по себе язык JavaScript не предусматривает работы с браузером. Он вообще не знает про HTML. Каждый элемент в документе - весь документ в целом, заголовок, таблицы внутри документа, заголовки таблицы, текст внутри ячеек таблицы - это части DOM для этого документа, поэтому все они доступны и могут изменяться с помощью DOM и JavaScript. создании сценария с использованием элемента script, либо включая в веб страницу инструкцию для загрузки скрипта вы можете немедленно приступить к использованию программного интерфейса (API), используя элементы document или window для взаимодействия с самим документом, либо для получения потомков этого документа, т.е. различных элементов на странице."
        },
        {
        contentTitle: "HTML документ и DOM",
        contentText: "Согласно DOM-модели, документ является иерархией. Каждый HTML-тег образует отдельный элемент-узел, каждый фрагмент текста - текстовый элемент. Проще говоря, HTML-документ представляет собой иерархическое дерево. Это означает, что у каждого элемента (кроме корневого) есть только один родитель, т.е. элемент, внутри которого он располагается. У корневого раздела родитель отсутствует. Это дерево образуется за счет вложенной структуры тегов и текстовых элементов, каждый из которых образует отдельный узел."
        },
        {
        contentTitle: "CSSOM",
        contentText: "Стили CSS, преобразуются в CSSOM - объектную модель CSS. Это похоже на DOM, но для CSS. В отличие от DOM, он не может быть построен постепенно. Поскольку правила CSS могут переопределять друг друга, движок браузера должен выполнять сложные вычисления, чтобы выяснить, как код CSS применяется к DOM."
        },
        {
        contentTitle: "Процесс построения веб-страницы",
        contentText: "Почему построение DOM приостановилось? Скрипты могут изменять как HTML, так и его продукт - DOM, добавляя узлы. Скрипты могут также запрашивать что-то о DOM, и если это происходит, когда DOM все еще строится, он может вернуть неожиданные результаты. JavaScript блокирует построение DOM, поскольку он может модифицировать документ. CSS не может изменить документ, поэтому кажется, что нет причин для его блокировки, правильно? Из-за этого CSS может блокировать разбор HTML в зависимости от порядка внешних таблиц стилей и сценариев в документе. Если перед скриптами в документе есть внешние таблицы стилей, конструкция объектов DOM и CSSOM может мешать друг другу. Когда синтаксический анализатор попадает в тег сценария, конструкция DOM не может продолжаться до тех пор, пока JavaScript не завершит выполнение, и JavaScript не будет выполнен до тех пор, пока CSS не будет загружен, проанализирован и не будет доступен CSSOM. Еще одна вещь, о которой следует помнить, заключается в том, что даже если CSS не блокирует конструкцию DOM, он блокирует рендеринг. Браузер ничего не отобразит, пока не будет DOM и CSSOM. Это связано с тем, что страницы без CSS часто непригодны для использования. Если браузер показал вам беспорядочную страницу без CSS, а через несколько мгновений показал стилизованную страницу, внезапные смещения содержимого и визуальные изменения плохо влияют на user experience."
        },
        {
        contentTitle: "Атрибуты defer и async",
        contentText: "Синхронные скрипты блокирующие парсер, это проблема. И не все сценарии одинаково важны для пользователей, например, для отслеживания и аналитики. Решение? Асинхронная загрузка этих менее важных сценариев. Атрибуты defer и async были введены, чтобы дать разработчикам возможность указать браузеру, какие скрипты обрабатывать асинхронно. Оба этих атрибута сообщают браузеру, что он может продолжить парсинг HTML при загрузке сценария «в фоновом режиме», а затем выполнить скрипт после его загрузки. Таким образом, загрузка скриптов не блокирует построение DOM и рендеринг страниц. В результате пользователь может видеть страницу до того, как все сценарии завершили загрузку. Разница между ними - это тот момент, когда загруженые скрипты начинают выполняться. Выполнение defer скриптов начинается после завершения парсинга, но перед событием DOMContentLoaded. Это гарантирует, что скрипты будут выполняться в том порядке, в котором они отображаются в HTML, и не будут блокировать синтаксический анализатор."
        },
        {
        contentTitle: "Атрибут preload",
        contentText: "async и defer отлично подходят, если вы хотите отложить обработку некоторых скриптов, но как быть с контентом который важен для пользователя? Общая цель состоит в том, чтобы сначала предоставить CSS, поскольку он блокирует рендеринг. Синхронные скрипты всегда будут иметь более высокий приоритет, чем асинхронный. Изображения, видимые в первоначальной области окна просмотра, должны быть загружены до тех, что находятся ниже видимого контента. А есть также шрифты, видеоролики, SVG ... В общем - это сложно.Вы как разработчик, знаете какие ресурсы являются наиболее важными для рендеринга страницы. Некоторые из них часто находятся в CSS или скриптах, и это может занять у браузера некоторое время, прежде чем он их даже обнаружит. Для этих важных ресурсов вы можете использовать <link rel=preload> для того чтобы сообщить браузеру о том, что вы хотите загрузить эти ресурсы как можно быстрее."
        },
        {
        contentTitle: "Атрибут xxx",
        contentText: "async и defer отлично подходят, если вы хотите отложить обработку некоторых скриптов, но как быть с контентом который важен для пользователя? Общая цель состоит в том, чтобы сначала предоставить CSS, поскольку он блокирует рендеринг. Синхронные скрипты всегда будут иметь более высокий приоритет, чем асинхронный. Изображения, видимые в первоначальной области окна просмотра, должны быть загружены до тех, что находятся ниже видимого контента. А есть также шрифты, видеоролики, SVG ... В общем - это сложно.Вы как разработчик, знаете какие ресурсы являются наиболее важными для рендеринга страницы. Некоторые из них часто находятся в CSS или скриптах, и это может занять у браузера некоторое время, прежде чем он их даже обнаружит. Для этих важных ресурсов вы можете использовать <link rel=preload> для того чтобы сообщить браузеру о том, что вы хотите загрузить эти ресурсы как можно быстрее."
        }]
    },
    {
        title: "ДЗ по HTML",
        hours: "11",
        deadline: "2019-01-21",
        text: "HTML (англ. HyperText Markup Language — Мова розмітки гіпертекстових документів) — стандартна мова розмітки веб-сторінок в Інтернеті. Більшість веб-сторінок створюються за допомогою мови HTML (або XHTML). Документ HTML оброблюється браузером та відтворюється на екрані у звичному для людини вигляді. HTML є похідною мовою від SGML, успадкувавши від неї визначення типу документа та ідеологію структурної розмітки тексту. Попри те, що HTML — штучна компютерна мова, вона не є мовою програмування. HTML разом із каскадними таблицями стилів та вбудованими скриптами — це три основні технології побудови веб-сторінок."
    }
];